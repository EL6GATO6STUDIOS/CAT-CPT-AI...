import streamlit as st
from googlesearch import search
import requests
from bs4 import BeautifulSoup
import random

# Sayfa ayarlarÄ±
st.set_page_config(page_title="Cat CPT ğŸ˜º", layout="wide")
st.title("Cat CPT ğŸ˜º")

# Sohbet geÃ§miÅŸi
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# KullanÄ±cÄ±dan giriÅŸ al
user_input = st.text_input("Sorunuzu yazÄ±n:")

# Yorumlama (analiz) cevabÄ± Ã¼reten fonksiyon
def generate_opinion_response(user_input):
    fikir_sablonlari = [
        "Bence bu oldukÃ§a dÃ¼ÅŸÃ¼ndÃ¼rÃ¼cÃ¼. '{}' konusu insanlarÄ±n bakÄ±ÅŸ aÃ§Ä±sÄ±na gÃ¶re farklÄ± yorumlanabilir.",
        "'{}' hakkÄ±nda dÃ¼ÅŸÃ¼ndÃ¼ÄŸÃ¼mde, baÄŸlam Ã§ok ÅŸey deÄŸiÅŸtiriyor. Genel olarak bu konu Ã¼zerinde dikkatle durulmalÄ±.",
        "AÃ§Ä±kÃ§asÄ± '{}' konusuna pek sÄ±cak bakmÄ±yorum. Ama farklÄ± fikirlerin deÄŸerli olduÄŸunu dÃ¼ÅŸÃ¼nÃ¼yorum.",
        "'{}' bana kalÄ±rsa gÃ¼nÃ¼mÃ¼zde tartÄ±ÅŸÄ±lmasÄ± gereken bir mesele. Ã–nemli olan yaklaÅŸÄ±m tarzÄ±dÄ±r.",
        "'{}' konusunu dÃ¼ÅŸÃ¼ndÃ¼ÄŸÃ¼mde aklÄ±ma gelen ilk ÅŸey: insanlara saygÄ± duyarak deÄŸerlendirilmesi gerektiÄŸidir.",
        "Kendi bakÄ±ÅŸ aÃ§Ä±ma gÃ¶re '{}' bazen abartÄ±lÄ±yor olabilir. Ama yine de Ã¶nemli bir noktaya iÅŸaret ediyor.",
        "'{}' ile ilgili fikrim: tamamen baÄŸlama gÃ¶re deÄŸiÅŸir ama Ã§oÄŸu durumda dikkate alÄ±nmasÄ± gereken bir durum.",
    ]
    return random.choice(fikir_sablonlari).format(user_input)

# KullanÄ±cÄ±dan metin geldiyse iÅŸleme
if user_input:
    original_text = user_input
    lower_text = user_input.lower()

    if any(keyword in lower_text for keyword in ["sence", "yorumla", "analiz", "ne dÃ¼ÅŸÃ¼nÃ¼yorsun", "karakter", "tartÄ±ÅŸ", "duygusal", "kiÅŸilik"]):
        response = generate_opinion_response(original_text)

    else:
        try:
            response = "AraÅŸtÄ±rÄ±lÄ±yor..."
            results = list(search(original_text, num=1, stop=1, pause=2))
            if results:
                url = results[0]
                res = requests.get(url, timeout=10)
                soup = BeautifulSoup(res.text, "html.parser")
                paragraphs = soup.find_all("p")
                found = False
                for p in paragraphs:
                    if len(p.text.strip()) > 50:
                        bilgi = p.text.strip()
                        response = f"SorduÄŸun ÅŸeyle ilgili ÅŸunu Ã¶ÄŸrendim: {bilgi}"
                        found = True
                        break
                if not found:
                    response = "Uygun bir bilgi bulunamadÄ±."
            else:
                response = "SonuÃ§ bulunamadÄ±."
        except Exception as e:
            response = f"AraÅŸtÄ±rma sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}"

    st.session_state.chat_history.append((original_text, response))

# Sohbet geÃ§miÅŸini gÃ¶ster
if st.session_state.chat_history:
    st.subheader("ğŸ§  Sohbet GeÃ§miÅŸi")
    for i, (q, a) in enumerate(st.session_state.chat_history, start=1):
        st.markdown(f"**{i}. Soru:** {q}")
        st.markdown(f"**{i}. Cevap:** {a}")
# Sohbet geÃ§miÅŸini gÃ¶ster
if st.session_state.chat_history:
    st.subheader("ğŸ§  Sohbet GeÃ§miÅŸi")
    for i, (q, a) in enumerate(st.session_state.chat_history, start=1):
        st.markdown(f"**{i}. Soru:** {q}")
        st.markdown(f"**{i}. Cevap:** {a}")
