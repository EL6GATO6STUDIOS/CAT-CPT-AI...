import streamlit as st
from PyPDF2 import PdfReader
from PIL import Image
from googlesearch import search
import requests
from bs4 import BeautifulSoup
import random
import json

# ---- TDK sÃ¶zlÃ¼kten anlam bulma ----
def tdk_lookup(word):
    url = f"https://sozluk.gov.tr/gts?ara={word}"
    try:
        res = requests.get(url, timeout=10)
        data = res.json()
        if isinstance(data, list) and len(data) > 0:
            return data[0]["anlamlarListe"][0]["anlam"]
        return None
    except:
        return None

# ---- Rastgele analiz cÃ¼mlesi Ã¼retme ----
def generate_opinion_response(user_input):
    fikir_sablonlari = [
        "Bence {} konusu oldukÃ§a dÃ¼ÅŸÃ¼ndÃ¼rÃ¼cÃ¼. Ä°nsanlarÄ±n karakterine ve bakÄ±ÅŸ aÃ§Ä±sÄ±na gÃ¶re farklÄ±lÄ±k gÃ¶sterebilir.",
        "{} hakkÄ±nda kendi fikrimi sÃ¶ylemem gerekirse: bu konuda birÃ§ok aÃ§Ä±dan deÄŸerlendirme yapÄ±labilir.",
        "AÃ§Ä±kÃ§asÄ± ben {} konusuna farklÄ± bir gÃ¶zle bakÄ±yorum. Ama herkesin fikrine saygÄ± duyarÄ±m.",
        "{} bana kalÄ±rsa gÃ¼nÃ¼mÃ¼zde Ã§okÃ§a tartÄ±ÅŸÄ±lan bir mesele. Ã–nemli olan kiÅŸinin yaklaÅŸÄ±mÄ±dÄ±r.",
        "{} konusunu dÃ¼ÅŸÃ¼ndÃ¼ÄŸÃ¼mde, insanlarÄ±n bunu farklÄ± yorumlayabileceÄŸini gÃ¶rÃ¼yorum.",
        "Kendi bakÄ±ÅŸ aÃ§Ä±ma gÃ¶re, {} biraz abartÄ±lÄ±yor olabilir. Ama yine de farklÄ± gÃ¶rÃ¼ÅŸler deÄŸerlidir.",
        "{} ile ilgili fikrim ÅŸu: bu tamamen baÄŸlama gÃ¶re deÄŸiÅŸir, ama genel olarak Ã¶nemli bir konudur.",
    ]
    sablon = random.choice(fikir_sablonlari)
    return sablon.format(user_input.capitalize())

# ---- Sayfa ayarlarÄ± ----
st.set_page_config(page_title="Cat CPT ğŸ˜º (v1.05)", layout="wide")
st.title("Cat CPT ğŸ˜º (v1.05)")

# ---- Sohbet geÃ§miÅŸi ----
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# ---- KullanÄ±cÄ± giriÅŸ alanÄ± ----
text = st.text_input("Sorunuzu yazÄ±n:")

# ---- Dosya yÃ¼kleme alanÄ± ----
uploaded_file = st.file_uploader("Bir dosya yÃ¼kleyin (.pdf, .txt, .jpg, .png)",
                                 type=["pdf", "txt", "jpg", "jpeg", "png"])

# ---- Dosya gÃ¶sterimi ----
if uploaded_file is not None:
    file_type = uploaded_file.type
    st.subheader("YÃ¼klenen Dosya:")

    if "pdf" in file_type:
        reader = PdfReader(uploaded_file)
        all_text = ""
        for page in reader.pages:
            all_text += page.extract_text()
        st.text_area("PDF Ä°Ã§eriÄŸi", all_text)

    elif "text" in file_type:
        content = uploaded_file.read().decode("utf-8")
        st.text_area("Metin DosyasÄ± Ä°Ã§eriÄŸi", content)

    elif "image" in file_type:
        img = Image.open(uploaded_file)
        st.image(img, caption="YÃ¼klenen GÃ¶rsel", use_column_width=True)

# ---- KullanÄ±cÄ± metni iÅŸleme ----
if text:
    original_text = text
    lower_text = text.lower()

    # SÃ¶zlÃ¼k aramasÄ± isteyen sorular
    if any(keyword in lower_text for keyword in ["ne demek", "anlamÄ±", "nedir", "kelime"]):
        kelimeler = original_text.split()
        cevaplar = []
        for kelime in kelimeler:
            meaning = tdk_lookup(kelime)
            if meaning:
                cevaplar.append(f"**{kelime}**: {meaning}")
        if cevaplar:
            response = "ğŸ“– TDK SÃ¶zlÃ¼ÄŸÃ¼ne gÃ¶re:\n" + "\n".join(cevaplar)
        else:
            response = "AradÄ±ÄŸÄ±nÄ±z kelimelerin anlamÄ±nÄ± bulamadÄ±m."

    # Analiz (yorumlama) isteyen ifadeler
    elif any(keyword in lower_text for keyword in ["sence", "yorumla", "analiz", "ne dÃ¼ÅŸÃ¼nÃ¼yorsun", "karakter", "tartÄ±ÅŸ", "duygusal", "kiÅŸilik"]):
        response = generate_opinion_response(original_text)

    # DiÄŸer tÃ¼m sorular iÃ§in Google araÅŸtÄ±rmasÄ±
    else:
        response = "AraÅŸtÄ±rÄ±lÄ±yor..."
        try:
            results = list(search(original_text, num_results=1))
            if results:
                url = results[0]
                res = requests.get(url, timeout=10)
                soup = BeautifulSoup(res.text, "html.parser")
                paragraphs = soup.find_all("p")
                found = False
                for p in paragraphs:
                    if len(p.text.strip()) > 50:
                        response = f"SorduÄŸun ÅŸeyle ilgili ÅŸÃ¶yle bir bilgi buldum: {p.text.strip()}"
                        found = True
                        break
                if not found:
                    response = "Uygun bir bilgi bulunamadÄ±."
            else:
                response = "SonuÃ§ bulunamadÄ±."
        except Exception as e:
            response = f"AraÅŸtÄ±rma sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}"

    # ---- Sohbet geÃ§miÅŸine ekle ----
    st.session_state.chat_history.append((original_text, response))

# ---- GeÃ§miÅŸi sÄ±rayla gÃ¶ster ----
if st.session_state.chat_history:
    st.subheader("ğŸ§  Sohbet GeÃ§miÅŸi")
    for i, (q, a) in enumerate(st.session_state.chat_history, start=1):
        st.markdown(f"**{i}. Soru:** {q}")
        st.markdown(f"**{i}. Cevap:** {a}")
